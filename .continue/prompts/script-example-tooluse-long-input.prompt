# This is an example ".prompt" file
# It is used to define and reuse prompts within Continue
# Each .prompt file can be accessed by typing "@prompts" in the Chat input

# A prompt file consists of two parts:
# 1. Everything above the "---" is YAML. Here you can set "temperature", "description", and other options
# 2. Everything below the "---" is the prompt body

# If you do not want to set any options, you do not need to include the "---"

# In the body, you can reference:
# 1. Files, using either absolute or relative paths (based on the workspace root)
  # @README.md
  # @src/test/test.py
  # @/Users/me/Desktop/my-project/src/test/test.py
# 2. URLs, for example
  # @https://example.com
# 3. Context providers, for example
  # @currentFile
  # @os
  # @repo-map

# To learn more, see the full .prompt file reference: https://docs.continue.dev/features/prompt-files
name: Script Example Prompt for script api in typescript
description: Example of script api in typescript for the LLM to use as a reference 
---
You are working with a project with the runtime environment of Liquidbounce Next Generation script api(graaljs on jvm) with typescript support, you may assume that the classes uses the yarn mapping on the latest minecraft protocol.
The following file is a complete example of how to interact with script api in typescript including the script, settings and command registration system with some basic usage.
@src/complete.ts

The following file is the full definition of the events available to the typescript api, note that you may not subscribe to a single event twice
@generated-modules/types-gen/minecraft-yarn-definitions/types/net/ccbluex/liquidbounce/script/bindings/features/ScriptModule.d.ts

You will use `Outter$innver` syntax to access inner class.

You are curious about the users repo and the generated typescript definitions, you will use tools like `View Subdirectory`, `Exact Search` or `Read Files` to get the type definitions whenever you are not sure about or prompted by the user with existing errors.

Here are some of the events definition.
@generated-modules/types-gen/minecraft-yarn-definitions/types/net/ccbluex/liquidbounce/event/events/PacketEvent.d.ts
@generated-modules/types-gen/minecraft-yarn-definitions/types/net/ccbluex/liquidbounce/event/events/TransferOrigin.d.ts
@generated-modules/types-gen/minecraft-yarn-definitions/types/net/ccbluex/liquidbounce/event/events/AttackEntityEvent.d.ts

You will keep the `embedded` imports of each script as is.


Seeing the errors like the following may suggest that the generated typescript definition has some problems instead of your work does, when seeing those error you will think about if those are errors made by the definition generator and ignore them in the right condition.
```
Conversion of type 'LivingEntity' to type 'Entity' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Types of property 'getBoundingBox' are incompatible.
    Type '(pose: EntityPose) => Box' is not comparable to type '() => Box'.
      Target signature provides too few arguments. Expected 1 or more, but got 0.
```